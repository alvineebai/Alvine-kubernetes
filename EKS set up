Step - 1 : Create EKS Management Host in AWS
Launch new Ubuntu VM using AWS Ec2 ( t2.micro )
Connect to machine and install kubectl using below commands
curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin
kubectl version --short --client
Install AWS CLI latest version using below commands
sudo apt install unzip
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
aws --version
Install eksctl using below commands
curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv /tmp/eksctl /usr/local/bin
eksctl version


Step - 2 : Create IAM role & attach to EKS Management Host
Create New Role using IAM service ( Select Usecase - ec2 )

Add below permissions for the role

Administrator-access
Enter Role Name (eksroleec2)

Attach created role to EKS Management Host (Select EC2 => Actions => Click on Security => Modify IAM Role => attach IAM role we have created => Update IAM role)


Step - 3 : Create EKS Cluster using eksctl
Syntax:

eksctl create cluster --name cluster-name
--region region-name
--node-type instance-type
--nodes-min 2
--nodes-max 2 \ --zones 

N. Virgina:
eksctl create cluster --name itpath360 --region us-east-1 --node-type t2.medium  --zones us-east-1a,us-east-1b

Note: Cluster creation will take 5 to 10 mins of time (we have to wait). After cluster created we can check nodes & pods using below command.
kubectl get nodes  
kubectl get pods
Note: We should be able to see EKS cluster nodes here.

Your EKS worker nodes security group must allow inbound port 80 from the internet.
Find the security group attached to the load balancer in the AWS console.
Make sure it has a rule:
Inbound: TCP 80 from 0.0.0.0/0


Now let us use the YAML configuration file below to deploy and browse a simple index.html web application on our EKS cluster
touch eks-html-app.yml
vi eks-html-app.yml           #### copy and paste the code below


apiVersion: v1
kind: ConfigMap
metadata:
  name: html-config
  namespace: default
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
      <title>EKS HTML App</title>
    </head>
    <body style="font-family: Arial; text-align: center; margin-top: 50px;">
      <h1>Welcome to My EKS Web App!</h1>
      <p>This application is running on an EKS cluster with 2 nodes.</p>
    </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eks-html-deployment
  labels:
    app: eks-html
spec:
  replicas: 2                     # 2 Pods (can run across your 2 nodes)
  selector:
    matchLabels:
      app: eks-html
  template:
    metadata:
      labels:
        app: eks-html
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html-volume
          mountPath: /usr/share/nginx/html
      volumes:
      - name: html-volume
        configMap:
          name: html-config
---
apiVersion: v1
kind: Service
metadata:
  name: eks-html-service
spec:
  type: LoadBalancer               # Expose app publicly via ELB
  selector:
    app: eks-html
  ports:
  - port: 80
    targetPort: 80


kubectl apply -f eks-html-app.yml
kubectl get pods
kubectl get svc

Copy the EXTERNAL-IP from the kubectl get svc output.
Open it in your browser:
http://<EXTERNAL-IP>

✅ Result
You’ll see:
“Welcome to My EKS Web App!
"This application is running on an EKS cluster with 2 nodes.”


Step - 4 : After your practise, delete Cluster and other resources we have used in AWS Cloud to avoid billing
eksctl delete cluster --name itpath360 --region us-east-1
